import { ProjectData } from './types'

export function generateProjectCharter(data: ProjectData): string {
  const define = data.phases.define
  
  return `# Project Charter: ${data.projectName || 'Untitled Project'}

**Date:** ${new Date().toLocaleDateString()}
**Last Updated:** ${data.lastUpdated}

---

## Problem Statement

${define['problem-statement'] || '_Not yet defined_'}

## Goal Statement

${define['goal-statement'] || '_Not yet defined_'}

## Stakeholders

${define['stakeholders'] || '_Not yet identified_'}

## Scope

${define['scope'] || '_Not yet defined_'}

### Constraints

${define['constraints'] || '_No constraints documented_'}

## Critical to Quality (CTQ) Factors

${define['ctqs'] || '_Not yet identified_'}

## Voice of Customer (VOC)

${define['voc-inputs'] || '_No VOC data collected_'}

---

## Project Timeline

| Phase | Status |
|-------|--------|
| Define | âœ“ Charter Created |
| Measure | In Progress |
| Analyze | Pending |
| Improve | Pending |
| Control | Pending |

---

*Generated by Kaizen Agent*
`
}

export function generateSIPOC(data: ProjectData): string {
  const measure = data.phases.measure
  
  return `# SIPOC Diagram

**Project:** ${data.projectName || 'Untitled Project'}
**Date:** ${new Date().toLocaleDateString()}

---

${measure['sipoc'] || `
| Suppliers | Inputs | Process | Outputs | Customers |
|-----------|--------|---------|---------|-----------|
| _TBD_ | _TBD_ | _TBD_ | _TBD_ | _TBD_ |
`}

## Process Details

### Current Metrics
${measure['current-metrics'] || '_Not yet measured_'}

### Data Sources
${measure['data-sources'] || '_Not yet identified_'}

### Measurement System
${measure['measurement-system'] || '_Not yet defined_'}

### Process Capability
${measure['process-capability'] || '_Not yet assessed_'}

---

*Generated by Kaizen Agent*
`
}

export function generateAnalysisReport(data: ProjectData): string {
  const analyze = data.phases.analyze
  
  return `# Root Cause Analysis

**Project:** ${data.projectName || 'Untitled Project'}
**Date:** ${new Date().toLocaleDateString()}

---

## Potential Root Causes

${analyze['root-causes'] || '_Not yet identified_'}

## Data Analysis Findings

${analyze['data-analysis'] || '_Analysis not yet complete_'}

## Validated Root Causes

${analyze['validated-causes'] || '_Validation pending_'}

## Value Stream Insights

${analyze['value-stream'] || '_Value stream mapping not yet conducted_'}

## Improvement Hypothesis

${analyze['hypothesis'] || '_Hypothesis not yet formed_'}

---

*Generated by Kaizen Agent*
`
}

export function generateImplementationPlan(data: ProjectData): string {
  const improve = data.phases.improve
  
  return `# Implementation Plan

**Project:** ${data.projectName || 'Untitled Project'}
**Date:** ${new Date().toLocaleDateString()}

---

## Solution Options Considered

${improve['solution-options'] || '_Solutions not yet identified_'}

## Selected Solutions

${improve['solution-selection'] || '_Selection not yet made_'}

### Rationale
_Document the decision criteria and scoring that led to this selection_

## Pilot Plan

${improve['pilot-plan'] || '_Pilot not yet planned_'}

## Pilot Results

${improve['pilot-results'] || '_Pilot not yet conducted_'}

## Full Implementation Plan

${improve['implementation-plan'] || '_Implementation plan not yet developed_'}

## Risk Assessment & Mitigation

${improve['risk-mitigation'] || '_Risks not yet assessed_'}

---

*Generated by Kaizen Agent*
`
}

export function generateControlPlan(data: ProjectData): string {
  const control = data.phases.control
  
  return `# Control Plan

**Project:** ${data.projectName || 'Untitled Project'}
**Date:** ${new Date().toLocaleDateString()}

---

## Control Metrics

${control['control-metrics'] || '_Metrics not yet defined_'}

## Monitoring Plan

${control['control-plan'] || '_Control plan not yet established_'}

## Standard Work Updated

${control['standard-work'] || '_Documentation not yet updated_'}

## Training Delivered

${control['training'] || '_Training not yet conducted_'}

## Process Ownership Handoff

${control['handoff'] || '_Handoff not yet completed_'}

## Benefits Realized

${control['benefits-realized'] || '_Benefits not yet measured_'}

## Lessons Learned

${control['lessons-learned'] || '_Lessons learned session not yet held_'}

---

## Sustainability Checklist

- [ ] Metrics dashboard created and accessible
- [ ] Control limits established
- [ ] Response plan documented for out-of-control signals
- [ ] Process owner identified and trained
- [ ] Standard work updated and communicated
- [ ] Review cadence established (daily/weekly/monthly)
- [ ] Continuous improvement mechanism in place

---

*Generated by Kaizen Agent*
`
}

export function generateFullReport(data: ProjectData): string {
  return `# DMAIC Project Report: ${data.projectName || 'Untitled Project'}

**Generated:** ${new Date().toLocaleString()}

---

${generateProjectCharter(data)}

---

# Measure Phase

${generateSIPOC(data)}

---

# Analyze Phase

${generateAnalysisReport(data)}

---

# Improve Phase

${generateImplementationPlan(data)}

---

# Control Phase

${generateControlPlan(data)}

---

## Appendices

### BMAD Brainstorming Notes

${Object.entries(data.bmadNotes || {}).map(([technique, notes]) => `
#### ${technique.charAt(0).toUpperCase() + technique.slice(1)}
${notes.map((note, i) => `${i + 1}. ${note}`).join('\n')}
`).join('\n') || '_No brainstorming notes recorded_'}

---

*Complete project documentation generated by Kaizen Agent*
`
}

export function downloadMarkdown(content: string, filename: string) {
  const blob = new Blob([content], { type: 'text/markdown' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}
